import { DirectoryService } from './../../service/directory.service';
import { MySQLService } from './../../service/my-sql.service';
import { Component, OnInit } from '@angular/core';
import { CashTransaction } from '../../interface/cash-transaction';
import { Directory } from '../../interface/directory';

@Component({
    selector: 'app-account-details',
    templateUrl: './account-details.component.html',
    styleUrls: ['./account-details.component.css']
})
export class AccountDetailsComponent implements OnInit {
    transactions: Array<CashTransaction> = [];
    selectedAccount: Directory;
    theDate: Date = new Date();

    constructor(private mysql: MySQLService, public directory: DirectoryService) { }

    ngOnInit() { }

    get() {
        if (+this.selectedAccount === 0) {
            return;
        }
        this.mysql.select('balance', {
            andWhere: {
                account_id: this.selectedAccount,
                postedOn: this.theDate
            }
        }).subscribe((res: any)=>{
            this.transactions = [];
            if( res.length >= 1){
                this.transactions.push({
                    id: 0,
                    giver_id: 0,
                    giver: 'Self',
                    receiver_id: +this.selectedAccount,
                    receiver: this.directory.get(+this.selectedAccount).name,
                    amount: +res[0].openingBalance,
                    description: 'Carry Forward From Last Date',
                    state: 'COMPLETED',
                    insertedBy: 0,
                    balance: +res[0].openingBalance,
                    postedOn: this.theDate
                });

            } else {
                this.transactions.push({
                    id: 0,
                    giver_id: 0,
                    giver: 'Self',
                    receiver_id: +this.selectedAccount,
                    receiver: this.directory.get(+this.selectedAccount).name,
                    amount: 0,
                    description: 'Previous Day Balance Not Available',
                    state: 'COMPLETED',
                    insertedBy: 0,
                    balance: 0,
                    postedOn: this.theDate
                });

            }
            this.getStatement();
        });


    }

    getClass(t: CashTransaction): string {
        if (+t.receiver_id === +this.selectedAccount) {
            return 'positive';
        } else {
            return 'negative';
        }
    }


    private getStatement(): void	{
        const request = {
            andWhere: {
                orWhere: {
                    giver_id: this.selectedAccount,
                    receiver_id: this.selectedAccount
                },
                andWhere: {
                    'DATE(postedOn)': this.theDate
                }
            },
            orderBy: 'postedOn ASC'
        };
        this.mysql.select('cashbook', request, true)
        .subscribe((res: any)=>{
            console.log(res);
            const data = res.rows;
            let i = 0;
            for(i = 0; i<data.length; i++){
                const item = data[i];
                this.transactions.push(
                    {
                        id: +item.id,
                        giver_id: +item.giver_id,
                        giver: this.directory.get(+item.giver_id).name,
                        receiver_id: +item.receiver_id,
                        receiver: this.directory.get(+item.receiver_id).name,
                        amount: +item.amount,
                        description: item.description,
                        state: item.state,
                        insertedBy: item.insertedBy,
                        balance: 0,
                        postedOn: new Date(item.postedOn)
                    }
                );

                if( +this.selectedAccount === +item.giver_id){
                    this.transactions[i+1].balance = (+this.transactions[i].balance) - (+item.amount);
                } else {
                    this.transactions[i+1].balance = (+this.transactions[i].balance) + (+item.amount);
                }
                this.transactions[i+1].balance = +this.transactions[i+1].balance.toFixed(2);

            }
        });

    }


}
